import { promises as fs } from 'fs';
import * as path from 'path';
import * as os from 'os';
import { applyAllAgentConfigs } from '../src/lib';

describe('Corrupted Generated Marker Fix', () => {
  let tempDir: string;

  beforeEach(async () => {
    tempDir = await fs.mkdtemp(
      path.join(os.tmpdir(), 'ruler-corrupted-marker-test-'),
    );
  });

  afterEach(async () => {
    await fs.rm(tempDir, { recursive: true, force: true });
  });

  it('should handle AGENTS.md with corrupted/missing generated marker', async () => {
    // Create .ruler directory and instructions file
    const rulerDir = path.join(tempDir, '.ruler');
    await fs.mkdir(rulerDir);

    const instructionsContent = `# Default Agent Instructions

.....`;

    await fs.writeFile(
      path.join(rulerDir, 'instructions.md'),
      instructionsContent,
    );

    // Step 1: Generate AGENTS.md properly with marker
    await applyAllAgentConfigs(
      tempDir,
      ['codex'],
      undefined,
      false,
      undefined,
      false,
      false,
      false,
      false,
      false,
    );

    const agentsMdPath = path.join(tempDir, 'AGENTS.md');
    const originalContent = await fs.readFile(agentsMdPath, 'utf8');

    expect(originalContent).toMatch(/^<!-- Generated by Ruler -->/);
    expect(originalContent).toContain('# Default Agent Instructions');

    // Step 2: Simulate user editing the file and removing/corrupting the marker
    const corruptedContent = originalContent.replace(
      '<!-- Generated by Ruler -->',
      '<!-- Edited by User -->',
    );
    await fs.writeFile(agentsMdPath, corruptedContent);

    const corruptedFile = await fs.readFile(agentsMdPath, 'utf8');
    expect(corruptedFile).toContain('<!-- Edited by User -->');
    expect(corruptedFile).not.toContain('<!-- Generated by Ruler -->');
    expect(corruptedFile).toContain('<!-- Source: .ruler/instructions.md -->'); // Still contains ruler sources

    // Step 3: Apply again - should detect corrupted file and regenerate properly
    await applyAllAgentConfigs(
      tempDir,
      ['codex'],
      undefined,
      false,
      undefined,
      false,
      false,
      false,
      false,
      false,
    );

    const fixedContent = await fs.readFile(agentsMdPath, 'utf8');

    // Should have proper marker again and no duplication
    expect(fixedContent).toMatch(/^<!-- Generated by Ruler -->/);
    expect(fixedContent).toContain('# Default Agent Instructions');

    // Count occurrences to ensure no duplication
    const instructionMatches = (
      fixedContent.match(/# Default Agent Instructions/g) || []
    ).length;
    expect(instructionMatches).toBe(1);

    // Should not contain the corrupted user comment
    expect(fixedContent).not.toContain('<!-- Edited by User -->');

    // Step 4: Apply again to ensure it remains stable
    await applyAllAgentConfigs(
      tempDir,
      ['codex'],
      undefined,
      false,
      undefined,
      false,
      false,
      false,
      false,
      false,
    );

    const finalContent = await fs.readFile(agentsMdPath, 'utf8');
    expect(finalContent).toBe(fixedContent); // Should be identical

    const finalInstructionMatches = (
      finalContent.match(/# Default Agent Instructions/g) || []
    ).length;
    expect(finalInstructionMatches).toBe(1);
  });

  it('should handle windsurf with corrupted AGENTS.md preventing duplication', async () => {
    // Create .ruler directory and instructions file
    const rulerDir = path.join(tempDir, '.ruler');
    await fs.mkdir(rulerDir);

    const instructionsContent = `# Default Agent Instructions

.....`;

    await fs.writeFile(
      path.join(rulerDir, 'instructions.md'),
      instructionsContent,
    );

    // Step 1: Create AGENTS.md with codex
    await applyAllAgentConfigs(
      tempDir,
      ['codex'],
      undefined,
      false,
      undefined,
      false,
      false,
      false,
      false,
      false,
    );

    // Step 2: Corrupt the marker
    const agentsMdPath = path.join(tempDir, 'AGENTS.md');
    const originalContent = await fs.readFile(agentsMdPath, 'utf8');
    const corruptedContent = originalContent.replace(
      '<!-- Generated by Ruler -->',
      '',
    );
    await fs.writeFile(agentsMdPath, corruptedContent);

    // Step 3: Apply windsurf - should not create duplication
    await applyAllAgentConfigs(
      tempDir,
      ['windsurf'],
      undefined,
      false,
      undefined,
      false,
      false,
      false,
      false,
      false,
    );

    const windsurfContent = await fs.readFile(agentsMdPath, 'utf8');

    // Should have only one occurrence of the instruction
    const instructionMatches = (
      windsurfContent.match(/# Default Agent Instructions/g) || []
    ).length;
    expect(instructionMatches).toBe(1);

    // Step 4: Apply windsurf again - should remain stable
    await applyAllAgentConfigs(
      tempDir,
      ['windsurf'],
      undefined,
      false,
      undefined,
      false,
      false,
      false,
      false,
      false,
    );

    const windsurfContent2 = await fs.readFile(agentsMdPath, 'utf8');
    expect(windsurfContent2).toBe(windsurfContent);

    const instructionMatches2 = (
      windsurfContent2.match(/# Default Agent Instructions/g) || []
    ).length;
    expect(instructionMatches2).toBe(1);
  });
});
