import { promises as fs } from 'fs';
import * as path from 'path';
import * as os from 'os';
import { applyAllAgentConfigs } from '../src/lib';

describe('AGENTS.md + Agent Duplication Fix', () => {
  let tempDir: string;

  beforeEach(async () => {
    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ruler-mixed-test-'));
  });

  afterEach(async () => {
    await fs.rm(tempDir, { recursive: true, force: true });
  });

  it('should not duplicate when AGENTS.md exists alongside agent-specific files', async () => {
    console.log(`Test directory: ${tempDir}`);
    
    // Create .ruler directory and instructions file
    const rulerDir = path.join(tempDir, '.ruler');
    await fs.mkdir(rulerDir);
    
    const instructionsContent = `# Default Agent Instructions

These are the default instructions for the agent.
Some more content here.
`;
    
    await fs.writeFile(path.join(rulerDir, 'instructions.md'), instructionsContent);

    // Step 1: First apply with an agent that creates AGENTS.md (like codex)
    console.log('First apply with codex (creates AGENTS.md)...');
    await applyAllAgentConfigs(
      tempDir,
      ['codex'],
      undefined,
      false,
      undefined,
      false,
      true, // verbose
      false,
      false,
      false,
    );

    const agentsMdPath = path.join(tempDir, 'AGENTS.md');
    const agentsMdContent1 = await fs.readFile(agentsMdPath, 'utf8');
    console.log('AGENTS.md after codex apply:', agentsMdContent1.substring(0, 200));
    console.log('AGENTS.md starts with marker?', agentsMdContent1.startsWith('<!-- Generated by Ruler -->'));

    // Step 2: Apply windsurf (should NOT cause duplication in its output)
    // Note: Windsurf now uses AGENTS.md format
    console.log('\nApplying windsurf with existing AGENTS.md...');
    await applyAllAgentConfigs(
      tempDir,
      ['windsurf'],
      undefined,
      false,
      undefined,
      false,
      true,
      false,
      false,
      false,
    );

    // Windsurf now writes to AGENTS.md
    const windsurfContent1 = await fs.readFile(agentsMdPath, 'utf8');
    console.log('Windsurf (AGENTS.md) content after apply:', windsurfContent1.substring(0, 200));
    
    // Step 3: Apply windsurf again (this is where duplication might happen)
    console.log('\nSecond windsurf apply...');
    await applyAllAgentConfigs(
      tempDir,
      ['windsurf'],
      undefined,
      false,
      undefined,
      false,
      true,
      false,
      false,
      false,
    );

    const windsurfContent2 = await fs.readFile(agentsMdPath, 'utf8');
    console.log('Windsurf (AGENTS.md) content after 2nd apply:', windsurfContent2.substring(0, 200));

    // Check for duplication
    const instructionMatches1 = (windsurfContent1.match(/# Default Agent Instructions/g) || []).length;
    const instructionMatches2 = (windsurfContent2.match(/# Default Agent Instructions/g) || []).length;
    
    console.log(`Windsurf instruction occurrences: 1st=${instructionMatches1}, 2nd=${instructionMatches2}`);
    console.log(`Content lengths: 1st=${windsurfContent1.length}, 2nd=${windsurfContent2.length}`);
    
    expect(instructionMatches1).toBe(1);
    expect(instructionMatches2).toBe(1);
    expect(windsurfContent2.length).toBe(windsurfContent1.length);
    expect(windsurfContent2).toBe(windsurfContent1);
    
  }, 30000);

  it('reproduces exact user scenario with ruler folder', async () => {
    console.log(`Test directory: ${tempDir}`);
    
    // Create .ruler directory and instructions file EXACTLY as user described
    const rulerDir = path.join(tempDir, '.ruler');
    await fs.mkdir(rulerDir);
    
    const instructionsContent = `# Default Agent Instructions

.....
`;
    
    await fs.writeFile(path.join(rulerDir, 'instructions.md'), instructionsContent);
    console.log('Created .ruler/instructions.md');

    // Run ruler apply equivalent multiple times for different agents
    const agents = ['codex', 'windsurf', 'copilot', 'gemini', 'cursor'];
    
    for (const agent of agents) {
      console.log(`\n=== Testing ${agent} ===`);
      
      // Clean up previous agent files but keep .ruler
      const files = await fs.readdir(tempDir);
      for (const file of files) {
        if (file !== '.ruler') {
          await fs.rm(path.join(tempDir, file), { recursive: true, force: true });
        }
      }
      
      // First apply
      await applyAllAgentConfigs(tempDir, [agent], undefined, false, undefined, false, false, false, false, false);
      
      // Check what was created
      const allFiles1 = await fs.readdir(tempDir, { recursive: true });
      console.log(`${agent} files after 1st apply:`, allFiles1);
      
      // Second apply - this is where user sees duplication
      await applyAllAgentConfigs(tempDir, [agent], undefined, false, undefined, false, false, false, false, false);
      
      // Check content
      const allFiles2 = await fs.readdir(tempDir, { recursive: true });
      console.log(`${agent} files after 2nd apply:`, allFiles2);
      
      // Check specific files for duplication
      const agentsMdPath = path.join(tempDir, 'AGENTS.md');
      let agentSpecificPath = '';
      
      if (agent === 'windsurf') {
        agentSpecificPath = path.join(tempDir, '.windsurf', 'rules', 'ruler_windsurf_instructions.md');
      } else if (agent === 'codex') {
        // Codex might not create a separate file
      } else if (agent === 'copilot') {
        // Copilot now writes to AGENTS.md, no separate file
      } else if (agent === 'cursor') {
        agentSpecificPath = path.join(tempDir, '.cursor', 'rules', 'ruler_cursor_instructions.mdc');
      } else if (agent === 'gemini') {
        // Gemini creates settings.json, not instructions.md
      }
      
      // Check AGENTS.md for duplication
      try {
        const agentsContent = await fs.readFile(agentsMdPath, 'utf8');
        const instructionMatches = (agentsContent.match(/# Default Agent Instructions/g) || []).length;
        console.log(`${agent} AGENTS.md instruction count: ${instructionMatches}`);
        console.log(`${agent} AGENTS.md starts with marker: ${agentsContent.startsWith('<!-- Generated by Ruler -->')}`);
        if (instructionMatches > 1) {
          console.log(`❌ DUPLICATION FOUND in ${agent} AGENTS.md!`);
          console.log('Content:', agentsContent);
        }
        expect(instructionMatches).toBe(1);
      } catch (error) {
        console.log(`${agent} AGENTS.md not found (expected for some agents)`);
      }
      
      // Check agent-specific file for duplication
      if (agentSpecificPath) {
        try {
          const agentContent = await fs.readFile(agentSpecificPath, 'utf8');
          const instructionMatches = (agentContent.match(/# Default Agent Instructions/g) || []).length;
          console.log(`${agent} specific file instruction count: ${instructionMatches}`);
          if (instructionMatches > 1) {
            console.log(`❌ DUPLICATION FOUND in ${agent} specific file!`);
            console.log('Content:', agentContent);
          }
          expect(instructionMatches).toBe(1);
        } catch (error) {
          console.log(`${agent} specific file not found: ${error}`);
        }
      }
    }
  }, 60000);
});