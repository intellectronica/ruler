import * as fs from 'fs/promises';
import * as path from 'path';
import * as os from 'os';
import { loadSingleConfiguration, processSingleConfiguration } from '../../../src/core/apply-engine';
import { resolveSelectedAgents } from '../../../src/core/agent-selection';
import { allAgents } from '../../../src/agents';
import { getAgentOutputPaths } from '../../../src/agents/agent-utils';

/**
 * This test attempts to reproduce the exact bug by simulating the full CLI process
 */
describe('Real-world duplication bug reproduction', () => {
  let tmpDir: string;
  let rulerDir: string;
  let projectRoot: string;

  beforeEach(async () => {
    tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ruler-real-test-'));
    projectRoot = tmpDir;
    rulerDir = path.join(tmpDir, '.ruler');
    await fs.mkdir(rulerDir, { recursive: true });
  });

  afterEach(async () => {
    await fs.rm(tmpDir, { recursive: true, force: true });
  });

  it('should simulate the real CLI workflow with consecutive applies', async () => {
    // Step 1: Create initial ruler content like a real project would have
    const initialRulerContent = 'You are a helpful coding assistant.\n\nAlways write clean, well-documented code.';
    await fs.writeFile(path.join(rulerDir, 'AGENTS.md'), initialRulerContent);
    
    // Also create a basic ruler.toml config
    await fs.writeFile(path.join(rulerDir, 'ruler.toml'), '[agents.windsurf]\nenabled = true');

    // Step 2: First apply - simulate `ruler apply`
    console.log('\n=== FIRST APPLY ===');
    let config = await loadSingleConfiguration(projectRoot, undefined, true);
    console.log('First apply concatenated rules length:', config.concatenatedRules.length);
    console.log('First apply concatenated rules:', JSON.stringify(config.concatenatedRules));
    
    const agents = resolveSelectedAgents(config.config, allAgents);
    const windsurfAgent = agents.find(a => a.getIdentifier() === 'windsurf');
    const agentsMdAgent = agents.find(a => a.getIdentifier() === 'agentsmd');
    
    if (!windsurfAgent) {
      throw new Error('Windsurf agent not found');
    }
    if (!agentsMdAgent) {
      throw new Error('AgentsMd agent not found');
    }
    
    console.log('Windsurf default output path:', windsurfAgent.getDefaultOutputPath(projectRoot));
    
    // Get the actual windsurf path using the agent utils
    const windsurfPaths = getAgentOutputPaths(windsurfAgent, projectRoot);
    console.log('Windsurf actual paths:', windsurfPaths);
    const windsurfPath = windsurfPaths[0];
    
    // Apply the configuration
    await processSingleConfiguration(
      [agentsMdAgent, windsurfAgent], // Only these two agents
      config,
      projectRoot,
      false, // verbose
      false, // dryRun
      true,  // cliMcpEnabled
    );
    
    // Check what was created
    const firstWindsurfContent = await fs.readFile(windsurfPath, 'utf8');
    console.log('First windsurf content length:', firstWindsurfContent.length);
    console.log('First windsurf content:', JSON.stringify(firstWindsurfContent));
    
    const agentsMdPath = path.join(projectRoot, 'AGENTS.md');
    const firstAgentsMdContent = await fs.readFile(agentsMdPath, 'utf8');
    console.log('First AGENTS.md content:', JSON.stringify(firstAgentsMdContent));

    // Step 3: Second apply - this should be idempotent
    console.log('\n=== SECOND APPLY ===');
    config = await loadSingleConfiguration(projectRoot, undefined, true);
    console.log('Second apply concatenated rules length:', config.concatenatedRules.length);
    console.log('Second apply concatenated rules:', JSON.stringify(config.concatenatedRules));
    
    await processSingleConfiguration(
      [agentsMdAgent, windsurfAgent],
      config,
      projectRoot,
      false, // verbose
      false, // dryRun
      true,  // cliMcpEnabled
    );
    
    const secondWindsurfContent = await fs.readFile(windsurfPath, 'utf8');
    console.log('Second windsurf content length:', secondWindsurfContent.length);
    console.log('Second windsurf content:', JSON.stringify(secondWindsurfContent));

    const secondAgentsMdContent = await fs.readFile(agentsMdPath, 'utf8');
    console.log('Second AGENTS.md content:', JSON.stringify(secondAgentsMdContent));

    // Step 4: Assertions
    // The concatenated rules should be identical between applies
    const firstConcatenatedRules = '\n\n<!-- Source: .ruler/AGENTS.md -->\n\nYou are a helpful coding assistant.\n\nAlways write clean, well-documented code.\n';
    expect(config.concatenatedRules).toBe(firstConcatenatedRules);
    
    // Since Windsurf now uses AGENTS.md, windsurfContent and agentsMdContent are the same
    expect(secondWindsurfContent).toBe(secondAgentsMdContent);
    
    // The content should be identical (no duplication)
    expect(secondWindsurfContent).toBe(firstWindsurfContent);
    
    // The AGENTS.md should contain the generated marker
    expect(secondAgentsMdContent).toContain('<!-- Generated by Ruler -->');
    
    // The content should only contain the original content once
    const rulerContentCount = (secondAgentsMdContent.match(/helpful coding assistant/g) || []).length;
    expect(rulerContentCount).toBe(1);
  });
});